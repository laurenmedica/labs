# -*- coding: utf-8 -*-
"""Pandas_and_CSV_Hands_On.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/fourfeatherz/DS2002F24/blob/main/Labs/Pandas_and_CSV_Hands_On.ipynb

**Loading the Data (CSV Files)**
We'll start by loading the two CSV files into pandas DataFrames.
"""

import pandas as pd

# Load the regular season and playoff data (semicolon-separated and encoding handled)
regular_season_df = pd.read_csv('/content/2023-2024 NBA Player Stats - Regular.csv', sep=';', encoding='latin1')
playoffs_df = pd.read_csv('/content/2023-2024 NBA Player Stats - Playoffs.csv', sep=';', encoding='latin1')

# Display the first few rows of each dataset
print("Regular Season Stats:")
display(regular_season_df.head())

print("\nPlayoff Stats:")
playoffs_df.head()

print("\nPlayoff Stats:")
playoffs_df.head()

"""**Exploring the Data**"""

# Get basic information about the datasets
print("Regular Season Data Info:")
regular_season_df.info()

print("\nPlayoff Data Info:")
playoffs_df.info()

# Check for missing values
print("\nMissing Values in Regular Season Data:")
regular_season_df.isnull().sum()

print("\nMissing Values in Playoff Data:")
print(playoffs_df.isnull().sum())

# Get statistical summaries of the data
print("\nStatistical Summary (Regular Season):")
#print(regular_season_df.describe())
regular_season_df.describe()

print("\nStatistical Summary (Playoffs):")
playoffs_df.describe()

"""**Cleaning some Data**"""

# Dropping any rows with missing values (if necessary)
regular_season_df = regular_season_df.dropna()
playoffs_df = playoffs_df.dropna()

# Rename columns if needed (for easier access)
regular_season_df.rename(columns={'Tm': 'Team','PTS': 'Points', 'TRB': 'Rebounds', 'AST': 'Assists'}, inplace=True)
playoffs_df.rename(columns={'Tm': 'Team','PTS': 'Points', 'TRB': 'Rebounds', 'AST': 'Assists'}, inplace=True)

print("Updated Regular Season Columns:")
print(regular_season_df.columns)

print("\nUpdated Playoff Columns:")
print(playoffs_df.columns)



"""**Data Analysis & Manipulation**"""

# Top 10 players with the most points in the regular season
top_scorers_regular = regular_season_df[['Player', 'Points']].sort_values(by='Points', ascending=False).head(10)
print("Top 10 Regular Season Scorers:")
top_scorers_regular

# Top 10 players with the most points in the playoffs
top_scorers_playoffs = playoffs_df[['Player', 'Points']].sort_values(by='Points', ascending=False).head(10)
print("Top 10 Playoff Scorers:")
top_scorers_playoffs

# Grouping the data by 'Team' and calculating the average stats for each team
team_avg_stats_regular = regular_season_df.groupby('Team')[['Points', 'Rebounds', 'Assists']].mean().reset_index()
print("\nAverage Team Stats (Regular Season):")
team_avg_stats_regular

# Similarly for playoffs
team_avg_stats_playoffs = playoffs_df.groupby('Team')[['Points', 'Rebounds', 'Assists']].mean().reset_index()
print("\nAverage Team Stats (Playoffs):")
team_avg_stats_playoffs

# Import visualization libraries
import matplotlib.pyplot as plt
import seaborn as sns

# Set the style for the plots
sns.set(style="whitegrid")

# Plot a bar chart of the top 10 regular season scorers
plt.figure(figsize=(10,6))
sns.barplot(x='Points', y='Player', data=top_scorers_regular)
plt.title('Top 10 Regular Season Scorers')
plt.show()

# Plot a bar chart of the top 10 playoff scorers
plt.figure(figsize=(10,6))
sns.barplot(x='Points', y='Player', data=top_scorers_playoffs)
plt.title('Top 10 Playoff Scorers')
plt.show()

# Plot a comparison of average team stats (Points, Rebounds, Assists) between regular season and playoffs
plt.figure(figsize=(12,8))
team_avg_stats = pd.merge(team_avg_stats_regular, team_avg_stats_playoffs, on='Team', suffixes=('_Regular', '_Playoffs'))

# Plot average points for regular season and playoffs
sns.barplot(x='Points_Regular', y='Team', data=team_avg_stats, color="b", label="Regular Season")
sns.barplot(x='Points_Playoffs', y='Team', data=team_avg_stats, color="r", label="Playoffs")
plt.title('Average Points per Team: Regular Season vs Playoffs')
plt.legend()
plt.show()

"""**Exercises**
Exercise 1: Top 10 Rebounders

Write code to display the top 10 players with the most rebounds in both the regular season and playoffs.

"""

top_rebounders_reg = regular_season_df[['Player', 'Rebounds']].sort_values(by='Rebounds', ascending=False).head(10)
print("Top 10 Regular Season Rebounders:")
print(top_rebounders_reg)


top_rebounders_playoffs = playoffs_df[['Player', 'Rebounds']].sort_values(by='Rebounds', ascending=False).head(10)
print("\nTop 10 Playoff Rebounders:")
print(top_rebounders_playoffs)



"""**Exercise 2: Assists Leader by Team**

Group the data by team and calculate which player on each team has the most assists for both the regular season and playoffs

hint -- inmax() will return the maximum value of a series that you grab

"""

assists_regular = regular_season_df.loc[regular_season_df.groupby('Team')['Assists'].idxmax(), ['Team', 'Player', 'Assists']]
print("Assists Leader by Team (Regular Season):")
print(assists_regular)

# Find the player with the most assists for each team in the playoffs
assists_playoffs = playoffs_df.loc[playoffs_df.groupby('Team')['Assists'].idxmax(), ['Team', 'Player', 'Assists']]
print("\nAssists Leader by Team (Playoffs):")
print(assists_playoffs)

"""**Exercise 3: Visualize Rebounds per Team** (optional)
Create a visualization that compares the average rebounds per team for the regular season and playoffs. Which team saw the biggest increase or decrease?
"""

team_avg_rebounds_regular = regular_season_df.groupby('Team')['Rebounds'].mean().reset_index()
team_avg_rebounds_playoffs = playoffs_df.groupby('Team')['Rebounds'].mean().reset_index()


team_avg_rebounds = pd.merge(team_avg_rebounds_regular, team_avg_rebounds_playoffs, on='Team', suffixes=('_Regular', '_Playoffs'))


plt.figure(figsize=(12, 8))
sns.barplot(x='Rebounds_Regular', y='Team', data=team_avg_rebounds, color="blue", label="Regular Season")
sns.barplot(x='Rebounds_Playoffs', y='Team', data=team_avg_rebounds, color="red", label="Playoffs" )
plt.title('Average Rebounds per Team: Regular Season vs Playoffs')
plt.legend()
plt.show()


team_avg_rebounds['Change'] = team_avg_rebounds['Rebounds_Playoffs'] - team_avg_rebounds['Rebounds_Regular']
biggest_change_team = team_avg_rebounds.loc[team_avg_rebounds['Change'].idxmax()]
print(f"\nTeam with the biggest increase in rebounds: {biggest_change_team['Team']} ({biggest_change_team['Change']} rebounds)")